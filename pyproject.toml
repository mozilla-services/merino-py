[project]
name = "merino-py"
version = "0.1.0"
description = "Service for Firefox Suggest at Mozilla"
authors = [{ name = "Mozilla" }]
requires-python = "~=3.13"
license = { text = "MPL-2.0" }
dependencies = [
    "fastapi[standard]>=0.115.2,<0.116",
    "dockerflow>=2022.7.0,<2023",
    "asgi-correlation-id>=4.3.4,<5",
    "dynaconf>=3.2.4,<4",
    "httpx>=0.23.0,<0.24",
    "sentry-sdk[fastapi]>=2.13.0,<3",
    "kinto-http>=11.0.0,<12",
    "aiodogstatsd>=0.16.0,<0.17",
    "geoip2>=4.6.0,<5",
    "rich>=12.5.1,<13",
    "wrapt>=1.14.1,<2",
    "elasticsearch[async]>=8.5.0,<9",
    "google-cloud-storage>=2.16.0,<3",
    "google-cloud-bigquery>=3.9.0,<4",
    "Pillow>=10.2.0,<11",
    "types-python-dateutil>=2.8.19.13,<3",
    "pydantic>=2.1.0,<3",
    "scipy>=1.14.1,<2",
    "orjson>=3.10.7,<4",
    "tenacity>=9.0.0,<10",
    "gcloud-aio-storage>=9.3.0,<10",
    "ua-parser>=1.0,<2.0",
    "redis[hiredis]>=5.2.1,<6",
]

[project.scripts]
merino-jobs = "merino.jobs.cli:cli"
probe-images = "merino.jobs.utils.domain_tester:main"

[tool.coverage.run]
source = ["merino"]
branch = true
relative_files = true
omit = [
  # Data file only
  "merino/jobs/utils/domain_category_mapping.py",
  "merino/jobs/utils/domain_tester.py"
]

[dependency-groups]
jobs = [
    "typer>=0.11.0,<0.15",
    "tldextract>=3.4.4,<4",
    "mechanicalsoup>=1.3.0",
]
load = [
    "faker>=20.0.0,<21",
    "numpy>=1.26.2,<2",
    "locust>=2.20.0,<3",
]
dev = [
    "mypy==1.14.1",
    "pre-commit>=2.20.0,<3",
    "bandit[toml]>=1.7.5,<2",
    "types-PyYAML>=6.0.11,<7",
    "types-requests>=2.28.10,<3",
    "types-geoip2>=3.0.0,<4",
    "scalene>=1.5.13,<2",
    "pytest>=7.2.0,<8",
    "pytest-asyncio>=0.20.3,<0.21",
    "pytest-cov>=4.0.0,<5",
    "pytest-mock>=3.10.0,<4",
    "freezegun>=1.2.2,<2",
    "requests-mock>=1.10.0,<2",
    "requests-toolbelt>=1.0.0,<2",
    "ruff>=0.4.10,<0.5",
    "types-redis>=4.5.1.1,<5",
    "testcontainers>=4.0.1,<5",
    "types-pillow>=10.2.0.20240520,<11",
    "coverage>=7.5.4,<8",
]

[tool.coverage.report]
show_missing = true

[tool.uv]
default-groups = [
    "jobs",
    "load",
    "dev",
]

[tool.ruff]
line-length = 99
exclude = ["build", "dist", "__pycache__", ".git"]
lint.select = ["D", "E4", "E7", "E9", "F"]
# Error Code Ref: https://www.pydocstyle.org/en/stable/error_codes.html
# D212 Multi-line docstring summary should start at the first line
lint.extend-select = ["D212"]
lint.ignore = [
  # D105 Docstrings for magic methods
  "D105",
  # D107 Docstrings for __init__
  "D107",
  # D203 as it conflicts with D211 https://github.com/PyCQA/pydocstyle/issues/141
  "D203",
  # D205 1 blank line required between summary line and description, awkward spacing
  "D205",
  # D400 First line should end with a period, doesn't work when sentence spans 2 lines
  "D400"
]
lint.extend-ignore = ["E203"]
lint.per-file-ignores = {"__init__.py" = ["F401"]}
lint.pydocstyle = { convention = "pep257" }

[tool.bandit]
# skips asserts
# B101: https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html#
# B104: https://bandit.readthedocs.io/en/latest/plugins/b104_hardcoded_bind_all_interfaces.html
# B104: https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b311-random
skips = ["B101", "B104", "B311"]
exclude_dirs = [
  # Data file only
  "merino/jobs/utils/domain_category_mapping.py"
]

[tool.mypy]
python_version = "3.13"
plugins = ['pydantic.mypy']
disallow_untyped_calls = true
follow_imports = "normal"
ignore_missing_imports = true
pretty = true
show_error_codes = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = true
warn_unreachable = true

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-v -r s --cov=merino"
filterwarnings = [
  # Transform warnings into errors.
  # Reference https://docs.pytest.org/en/stable/how-to/capture-warnings.html
  # to exempt from this transformation, which should be very rare for Merino.
  "error",
  # Ignored due to https://github.com/encode/starlette/discussions/2603
  "ignore::pytest.PytestUnraisableExceptionWarning",
  # Ignored as `robobro` still uses an old version of `werkzeug`
  "ignore:'OrderedMultiDict' is deprecated",
]
[tool.hatch.build.targets.sdist]
include = ["merino"]

[tool.hatch.build.targets.wheel]
include = ["merino"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

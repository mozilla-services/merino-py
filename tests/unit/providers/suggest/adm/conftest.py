# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

"""Module for test configurations for the AdM provider unit test directory."""

import json
from typing import Any

import pytest
from moz_merino_ext.amp import AmpIndexManager
from pytest_mock import MockerFixture

from merino.providers.suggest.adm.backends.protocol import (
    AdmBackend,
    SuggestionContent,
)
from merino.providers.suggest.adm.backends.remotesettings import FormFactor
from merino.providers.suggest.adm.provider import Provider


@pytest.fixture(name="adm_parameters")
def fixture_adm_parameters() -> dict[str, Any]:
    """Define provider parameters for test."""
    return {
        "score": 0.3,
        "name": "adm",
        "resync_interval_sec": 10800,
        "cron_interval_sec": 60,
    }


@pytest.fixture(name="rs_attachment_raw_us")
def fixture_rs_attachment_raw_us() -> str:
    """Return raw attachment data as generated by the Remote Settings endpoint."""
    return json.dumps(
        [
            {
                "id": 2,
                "advertiser": "Example.org",
                "click_url": "https://example.org/click/mozilla",
                "full_keywords": [["firefox accounts", 3], ["mozilla firefox accounts", 4]],
                "iab_category": "5 - Education",
                "icon": "01",
                "impression_url": "https://example.org/impression/mozilla",
                "keywords": [
                    "firefox",
                    "firefox account",
                    "firefox accounts",
                    "mozilla",
                    "mozilla firefox",
                    "mozilla firefox account",
                    "mozilla firefox accounts",
                ],
                "title": "Mozilla Firefox Accounts",
                "url": "https://example.org/target/mozfirefoxaccounts",
            }
        ]
    )


@pytest.fixture(name="rs_attachment_raw_de")
def fixture_rs_attachment_raw_de() -> str:
    """Return raw attachment data as generated by the Remote Settings endpoint."""
    return json.dumps(
        [
            {
                "id": 2,
                "advertiser": "de.Example.org",
                "click_url": "https://de.example.org/click/mozilla",
                "full_keywords": [["firefox accounts de", 4], ["mozilla firefox accounts de", 5]],
                "iab_category": "5 - Education",
                "icon": "01",
                "impression_url": "https://de.example.org/impression/mozilla",
                "keywords": [
                    "firefox",
                    "firefox account",
                    "firefox accounts",
                    "firefox accounts de",
                    "mozilla",
                    "mozilla firefox",
                    "mozilla firefox account",
                    "mozilla firefox accounts" "mozilla firefox accounts de",
                ],
                "title": "Mozilla Firefox Accounts",
                "url": "https://de.example.org/target/mozfirefoxaccounts",
            }
        ]
    )


@pytest.fixture(name="backend_mock")
def fixture_backend_mock(
    mocker: MockerFixture, rs_attachment_raw_us: str, rs_attachment_raw_de: str
) -> Any:
    """Create an AdmBackend mock object for test."""
    backend_mock: Any = mocker.AsyncMock(spec=AdmBackend)
    index_manager = AmpIndexManager()  # type: ignore[no-untyped-call]
    index_manager.build(f"US/({FormFactor.DESKTOP.value},)", rs_attachment_raw_us)
    index_manager.build(f"DE/({FormFactor.PHONE.value},)", rs_attachment_raw_de)
    backend_mock.fetch.return_value = SuggestionContent(
        index_manager=index_manager,
        icons={"01": "attachment-host/main-workspace/quicksuggest/icon-01"},
    )
    return backend_mock


@pytest.fixture(name="adm")
def fixture_adm(backend_mock: Any, adm_parameters: dict[str, Any]) -> Provider:
    """Create an AdM Provider for test."""
    return Provider(backend=backend_mock, **adm_parameters)

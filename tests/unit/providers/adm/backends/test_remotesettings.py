# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

"""Unit tests for the Remote Settings backend module."""
from typing import Any
from urllib.parse import urljoin

import httpx
import kinto_http
import pytest
from httpx import HTTPError, Request, Response
from kinto_http import KintoException
from pytest_mock import MockerFixture

from merino.exceptions import BackendError
from merino.providers.adm.backends.protocol import SuggestionContent
from merino.providers.adm.backends.remotesettings import (
    KintoSuggestion,
    RemoteSettingsBackend,
)


@pytest.fixture(name="rs_parameters")
def fixture_rs_parameters() -> dict[str, str]:
    """Define default Remote Settings parameters for test."""
    return {
        "server": "test://test",
        "bucket": "main",
        "collection": "quicksuggest",
    }


@pytest.fixture(name="rs_backend")
def fixture_rs_backend(rs_parameters: dict[str, str]) -> RemoteSettingsBackend:
    """Create a RemoteSettingsBackend object for test."""
    return RemoteSettingsBackend(**rs_parameters)


@pytest.fixture(name="rs_records")
def fixture_rs_records() -> list[dict[str, Any]]:
    """Return fake records data as generated by the Remote Settings get_records()
    method.
    """
    return [
        {
            "type": "data",
            "schema": 123,
            "attachment": {
                "hash": "abcd",
                "size": 1,
                "filename": "data-01.json",
                "location": "main-workspace/quicksuggest/attachmment-01.json",
                "mimetype": "application/octet-stream",
            },
            "id": "data-01",
            "last_modified": 123,
        },
        {
            "type": "offline-expansion-data",
            "schema": 111,
            "attachment": {
                "hash": "efgh",
                "size": 1,
                "filename": "offline-expansion-data-01.json",
                "location": "main-workspace/quicksuggest/attachment-02.json",
                "mimetype": "application/octet-stream",
            },
            "id": "offline-expansion-data-01",
            "last_modified": 123,
        },
        {
            "type": "icon",
            "schema": 456,
            "attachment": {
                "hash": "efghabcasd",
                "size": 1,
                "filename": "icon-01",
                "location": "main-workspace/quicksuggest/icon-01",
                "mimetype": "application/octet-stream",
            },
            "content_type": "image/png",
            "id": "icon-01",
            "last_modified": 123,
        },
    ]


@pytest.fixture(name="rs_server_info")
def fixture_rs_server_info() -> dict[str, Any]:
    """Return fake server information as generated by the Remote Settings server_info()
    method.
    """
    return {
        "project_name": "Remote Settings PROD",
        "project_version": "15.0.0",
        "http_api_version": "1.22",
        "project_docs": "https://remote-settings.readthedocs.io",
        "url": "https://firefox.settings.services.mozilla.com/v1/",
        "settings": {
            "batch_max_requests": 25,
            "readonly": True,
            "explicit_permissions": False,
        },
        "capabilities": {
            "changes": {
                "description": (
                    "Track modifications of records in Kinto and store the collection "
                    "timestamps into a specific bucket and collection."
                ),
                "url": (
                    "http://kinto.readthedocs.io/en/latest/tutorials/"
                    "synchronisation.html#polling-for-remote-changes"
                ),
                "version": "30.1.1",
                "collections": [
                    "/buckets/blocklists",
                    "/buckets/blocklists-preview",
                    "/buckets/main",
                    "/buckets/main-preview",
                    "/buckets/security-state",
                    "/buckets/security-state-preview",
                ],
            },
            "attachments": {
                "description": "Add file attachments to records",
                "url": "https://github.com/Kinto/kinto-attachment/",
                "version": "6.3.1",
                "base_url": "attachment-host/",
            },
        },
    }


@pytest.fixture(name="rs_attachment")
def fixture_rs_attachment() -> KintoSuggestion:
    """Return fake attachment data as generated by the Remote Settings endpoint."""
    return KintoSuggestion(
        id=2,
        advertiser="Example.org",
        impression_url="https://example.org/impression/mozilla",
        click_url="https://example.org/click/mozilla",
        full_keywords=[["firefox accounts", 3], ["mozilla firefox accounts", 4]],
        iab_category="5 - Education",
        icon="01",
        keywords=[
            "firefox",
            "firefox account",
            "firefox accounts",
            "mozilla",
            "mozilla firefox",
            "mozilla firefox account",
            "mozilla firefox accounts",
        ],
        title="Mozilla Firefox Accounts",
        url="https://example.org/target/mozfirefoxaccounts",
    )


@pytest.fixture(name="rs_attachment_response")
def fixture_rs_attachment_response(rs_attachment: KintoSuggestion) -> httpx.Response:
    """Return response content for a Remote Settings attachment."""
    return httpx.Response(
        status_code=200,
        json=[dict(rs_attachment)],
        request=httpx.Request(
            method="GET",
            url=(
                "attachment-host/main-workspace/quicksuggest/"
                "6129d437-b3c1-48b5-b343-535e045d341a.json"
            ),
        ),
    )


@pytest.fixture(name="rs_wiki_attachment")
def fixture_rs_wiki_attachment() -> KintoSuggestion:
    """Return fake attachment data containing Wiki-adm suggestion as generated
    by the Remote Settings endpoint.
    """
    return KintoSuggestion(
        id=2,
        advertiser="Wikipedia",
        impression_url="https://wikipedia.org/impression/mozilla",
        click_url="https://wikipedia.org/en/Mozilla",
        full_keywords=[["firefox accounts", 3], ["mozilla firefox accounts", 4]],
        iab_category="5 - Education",
        icon="01",
        keywords=[
            "firefox",
            "firefox account",
            "firefox accounts",
            "mozilla",
            "mozilla firefox",
            "mozilla firefox account",
            "mozilla firefox accounts",
        ],
        title="Mozilla Wikipedia Accounts",
        url="https://wikipedia.org/en/Mozilla",
    )


@pytest.fixture(name="rs_wiki_attachment_response")
def fixture_rs_wiki_attachment_response(
    rs_wiki_attachment: KintoSuggestion,
) -> httpx.Response:
    """Return response content for a Remote Settings attachment."""
    return httpx.Response(
        status_code=200,
        json=[dict(rs_wiki_attachment)],
        request=httpx.Request(
            method="GET",
            url="",
        ),
    )


@pytest.mark.parametrize(
    "parameter",
    ["server", "collection", "bucket"],
)
def test_init_invalid_remote_settings_parameter_error(
    rs_parameters: dict[str, str], parameter: str
) -> None:
    """Test that a ValueError is raised if initializing with empty Remote Settings
    values.
    """
    expected_error_value: str = (
        "The Remote Settings 'server', 'collection' or 'bucket' parameters are not "
        "specified"
    )
    rs_parameters[parameter] = ""

    with pytest.raises(ValueError) as error:
        RemoteSettingsBackend(**rs_parameters)

    assert str(error.value) == expected_error_value


@pytest.mark.asyncio
async def test_fetch(
    mocker: MockerFixture,
    rs_backend: RemoteSettingsBackend,
    rs_records: list[dict[str, Any]],
    rs_server_info: dict[str, Any],
    rs_attachment_response: httpx.Response,
    adm_suggestion_content: SuggestionContent,
) -> None:
    """Test that the fetch method returns the proper suggestion content."""
    mocker.patch.object(kinto_http.AsyncClient, "get_records", return_value=rs_records)
    mocker.patch.object(
        kinto_http.AsyncClient, "server_info", return_value=rs_server_info
    )
    mocker.patch.object(httpx.AsyncClient, "get", return_value=rs_attachment_response)

    suggestion_content: SuggestionContent = await rs_backend.fetch()

    assert suggestion_content == adm_suggestion_content


@pytest.mark.asyncio
async def test_fetch_no_adm_wikipedia_result(
    mocker: MockerFixture,
    rs_backend: RemoteSettingsBackend,
    rs_records: list[dict[str, Any]],
    rs_server_info: dict[str, Any],
    rs_wiki_attachment_response: httpx.Response,
) -> None:
    """Test that the fetch method returns no suggestions as a result of filtering out
    records with Wikipedia defined as advertiser.
    """
    mocker.patch.object(kinto_http.AsyncClient, "get_records", return_value=rs_records)
    mocker.patch.object(
        kinto_http.AsyncClient, "server_info", return_value=rs_server_info
    )
    mocker.patch.object(
        httpx.AsyncClient, "get", return_value=rs_wiki_attachment_response
    )

    suggestion_content: SuggestionContent = await rs_backend.fetch()

    assert suggestion_content.results == []


@pytest.mark.asyncio
async def test_get_records_backend_error(
    mocker: MockerFixture,
    rs_backend: RemoteSettingsBackend,
) -> None:
    """Test that the method raises an appropriate exception in the event of an
    error while getting the records.
    """
    expected_error_value: str = "Failed to get records"
    mocker.patch.object(
        kinto_http.AsyncClient,
        "get_records",
        side_effect=KintoException("403 - Forbidden"),
    )

    with pytest.raises(BackendError) as error:
        await rs_backend.get_records()

    assert str(error.value) == expected_error_value


@pytest.mark.asyncio
async def test_get_attachment_host(
    mocker: MockerFixture,
    rs_backend: RemoteSettingsBackend,
    rs_server_info: dict[str, Any],
) -> None:
    """Test that the method returns the proper attachment host."""
    expected_attachment_host: str = "attachment-host/"
    mocker.patch.object(
        kinto_http.AsyncClient, "server_info", return_value=rs_server_info
    )

    attachment_host: str = await rs_backend.get_attachment_host()

    assert attachment_host == expected_attachment_host


@pytest.mark.asyncio
async def test_get_attachment_host_backend_error(
    mocker: MockerFixture,
    rs_backend: RemoteSettingsBackend,
) -> None:
    """Test that the method raises an appropriate exception in the event of an
    error while getting the attachment host.
    """
    expected_error_value: str = "Failed to get server information"
    mocker.patch.object(
        kinto_http.AsyncClient,
        "server_info",
        side_effect=KintoException("403 - Forbidden"),
    )

    with pytest.raises(BackendError) as error:
        await rs_backend.get_attachment_host()

    assert str(error.value) == expected_error_value


@pytest.mark.asyncio
async def test_get_suggestions(
    mocker: MockerFixture,
    rs_backend: RemoteSettingsBackend,
    rs_records: list[dict[str, Any]],
    rs_attachment: KintoSuggestion,
    rs_attachment_response: httpx.Response,
) -> None:
    """Test that the method returns the proper suggestion information."""
    expected_suggestions: list[KintoSuggestion] = [rs_attachment]
    attachment_host: str = "attachment-host/"
    mocker.patch.object(httpx.AsyncClient, "get", return_value=rs_attachment_response)

    suggestions: list[KintoSuggestion] = await rs_backend.get_suggestions(
        attachment_host, rs_records
    )

    assert suggestions == expected_suggestions


@pytest.mark.asyncio
async def test_get_suggestions_backend_error(
    mocker: MockerFixture,
    rs_backend: RemoteSettingsBackend,
    rs_records: list[dict[str, Any]],
) -> None:
    """Test that the method raises an appropriate exception in the event of an
    error while getting the suggestion information.
    """
    expected_error_value: str = "(RemoteSettingsError('Failed to get attachment'),)"
    attachment_host: str = "attachment-host/"
    mocker.patch.object(
        httpx.AsyncClient,
        "get",
        side_effect=HTTPError("Invalid Request - Get Attachment"),
    )

    with pytest.raises(BackendError) as error:
        await rs_backend.get_suggestions(attachment_host, rs_records)

    assert str(error.value) == expected_error_value


@pytest.mark.asyncio
async def test_get_attachment(
    mocker: MockerFixture,
    rs_backend: RemoteSettingsBackend,
    rs_attachment: KintoSuggestion,
    rs_attachment_response: httpx.Response,
) -> None:
    """Test that the method returns the proper attachment information."""
    expected_attachment: list[KintoSuggestion] = [rs_attachment]
    url: str = urljoin(
        base="attachment-host",
        url="main-workspace/quicksuggest/6129d437-b3c1-48b5-b343-535e045d341a.json",
    )
    mocker.patch.object(httpx.AsyncClient, "get", return_value=rs_attachment_response)

    attachment: list[KintoSuggestion] = await rs_backend.get_attachment(url)

    assert attachment == expected_attachment


@pytest.mark.asyncio
async def test_get_attachment_backend_error(
    mocker: MockerFixture, rs_backend: RemoteSettingsBackend
) -> None:
    """Test that the method raises an appropriate exception in the event of an
    error while getting the attachment information.
    """
    expected_error_value: str = "Failed to get attachment"
    url: str = urljoin(
        base="attachment-host",
        url="main-workspace/quicksuggest/6129d437-b3c1-48b5-b343-535e045d341a.json",
    )
    mocker.patch.object(
        httpx.AsyncClient,
        "get",
        return_value=Response(
            status_code=403,
            text=(
                f"Client error '403 Forbidden' for url '{url}' "
                f"For more information check: https://httpstatuses.com/403"
            ),
            request=Request(method="GET", url=url),
        ),
    )

    with pytest.raises(BackendError) as error:
        await rs_backend.get_attachment(url)

    assert str(error.value) == expected_error_value

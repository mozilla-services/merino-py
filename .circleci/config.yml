# These environment variables must be set in CircleCI UI
#
# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>
# DOCKERHUB_MERINO_LOCUST_REPO - docker hub repo for performance test, format: <username>/<repo>
# DOCKER_USER    - login info for docker hub
# DOCKER_PASS

version: 2.1

workflows:
  pr-workflow:
    jobs:
      - checks: &pr-filters
          filters:
            branches:
              ignore: main
      - unit-tests:
          <<: *pr-filters
      - integration-tests:
          <<: *pr-filters
      - test-coverage-check:
          <<: *pr-filters
          requires:
            - unit-tests
            - integration-tests
      - docker-image-build:
          <<: *pr-filters
      - contract-tests:
          <<: *pr-filters
          requires:
            - docker-image-build
      - docs-build:
          <<: *pr-filters

  main-workflow:
    jobs:
      - checks: &main-filters
          filters:
            branches:
              only: main
      - unit-tests:
          <<: *main-filters
      - integration-tests:
          <<: *main-filters
      - test-coverage-check:
          <<: *main-filters
          requires:
            - unit-tests
            - integration-tests
      - docker-image-build:
          <<: *main-filters
      - contract-tests:
          <<: *main-filters
          requires:
            - docker-image-build
      - docs-build:
          <<: *main-filters
      - docs-publish-github-pages:
          <<: *main-filters
          requires:
            - docs-build
      - check-for-deployment:
          <<: *main-filters
          requires:
            - checks
            - test-coverage-check
            - contract-tests
      - docker-image-publish-locust:
          <<: *main-filters
          requires:
            - check-for-deployment
      - docker-image-publish:
          <<: *main-filters
          requires:
            - docker-image-publish-locust

jobs:
  checks:
    docker:
      - image: cimg/python:3.11
    steps:
      - checkout
      - run:
          name: Code linting
          command: make -k lint
  unit-tests:
    docker:
      - image: cimg/python:3.11
    steps:
      - checkout
      - run:
          name: Create Workspace
          command: mkdir -p workspace
      - run:
          name: Unit tests
          command: make unit-tests
          environment:
            TEST_RESULTS_DIR: workspace/test-results
      - store_test_results:
          path: workspace/test-results
      - persist_to_workspace:
          root: workspace
          paths:
            - test-results
  integration-tests:
    docker:
      - image: cimg/python:3.11
    steps:
      - checkout
      - run:
          name: Create Workspace
          command: mkdir -p workspace
      - run:
          name: Integration tests
          command: make integration-tests
          environment:
            TEST_RESULTS_DIR: workspace/test-results
      - store_test_results:
          path: workspace/test-results
      - persist_to_workspace:
          root: workspace
          paths:
            - test-results
  test-coverage-check:
    docker:
      - image: cimg/python:3.11
    steps:
      - checkout
      - attach_workspace:
          at: workspace
      - run:
          name: Evaluate minimum test coverage
          command: make test-coverage-check
          environment:
            TEST_RESULTS_DIR: workspace/test-results
  docker-image-build:
    docker:
      - image: cimg/base:2022.08
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - write-version
      - store_artifacts:
          path: version.json
      - run:
          name: Build image
          command: make docker-build
      - run:
          name: Save image into workspace
          command: |
            mkdir -p /tmp/workspace
            docker save -o /tmp/workspace/merinopy.tar app:build
            gzip /tmp/workspace/merinopy.tar
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - merinopy.tar.gz
  contract-tests:
    machine:
      docker_layer_caching: false
      image: ubuntu-2004:202101-01 # Ubuntu 20.04, Docker v20.10.2, Docker Compose v1.28.2
    working_directory: ~/merino
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load Docker image from workspace
          command: docker load -i /tmp/workspace/merinopy.tar.gz
      - run:
          name: Contract tests
          command: |
            sudo chown 1000:1000 tests/contract/kinto-attachments
            make run-contract-tests
  check-for-deployment:
    docker:
      - image: cimg/base:2022.08
    steps:
      - checkout
  docker-image-publish:
    # Pushing a new production Docker image to the Docker Hub registry triggers a
    # webhook that starts the Jenkins deployment workflow
    docker:
      - image: cimg/base:2022.08
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load Docker image from workspace
          command: docker load -i /tmp/workspace/merinopy.tar.gz
      - dockerhub-login
      - run:
          name: Push to Docker Hub
          # The commit tag signals deployment and load test instructions to Jenkins by
          # modifying the Docker image tag name. The convention looks as follows:
          #^(?P<environment>stage|prod)(?:-(?P<task>\w+)-(?P<onfailure>warn|abort))?-(?P<commit>[a-z0-9]+)$
          command: |
            if git log -1 "$CIRCLE_SHA1" | grep -q '\[load test: warn\]'; then
              echo "Load test requested. Slack warning will be output if test fails and deployment workflow for prod will proceed."
              STAGE_DOCKER_TAG="stage-loadtest-warn-${CIRCLE_SHA1}"
            elif git log -1 "$CIRCLE_SHA1" | grep -q '\[load test: abort\]'; then
              echo "Load test requested. Deployment workflow for prod will abort if load test fails."
              STAGE_DOCKER_TAG="stage-loadtest-abort-${CIRCLE_SHA1}"
            else
              STAGE_DOCKER_TAG="stage-${CIRCLE_SHA1}"
            fi
            echo "${DOCKERHUB_REPO}:${STAGE_DOCKER_TAG}"
            docker tag app:build "${DOCKERHUB_REPO}:${STAGE_DOCKER_TAG}"
            docker images
            docker push "${DOCKERHUB_REPO}:${STAGE_DOCKER_TAG}"

            PROD_DOCKER_TAG="prod-${CIRCLE_SHA1}"
            echo "${DOCKERHUB_REPO}:${PROD_DOCKER_TAG}"
            docker tag app:build "${DOCKERHUB_REPO}:${PROD_DOCKER_TAG}"
            docker tag app:build "${DOCKERHUB_REPO}:latest"
            docker images
            docker push "${DOCKERHUB_REPO}:${PROD_DOCKER_TAG}"
            docker push "${DOCKERHUB_REPO}:latest"
  docker-image-publish-locust:
    docker:
      - image: cimg/base:2022.08
    steps:
      - checkout
      - run:
          name: Check for load test directive
          command: |
            if ! git log -1 "$CIRCLE_SHA1" | grep -q '\[load test: abort\|warn\]'; then
              echo "Skipping remaining steps in this job: load test not required."
              circleci-agent step halt
            fi
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build image
          command: docker build -t merino-locust -f ./tests/load/Dockerfile .
      - dockerhub-login
      - run:
          name: Push to Docker Hub
          command: |
            DOCKER_TAG="${CIRCLE_SHA1}"
            echo ${DOCKERHUB_MERINO_LOCUST_REPO}:${DOCKER_TAG}
            docker tag merino-locust ${DOCKERHUB_MERINO_LOCUST_REPO}:${DOCKER_TAG}
            docker tag merino-locust ${DOCKERHUB_MERINO_LOCUST_REPO}:latest
            docker images
            docker push "${DOCKERHUB_MERINO_LOCUST_REPO}:${DOCKER_TAG}"
            docker push "${DOCKERHUB_MERINO_LOCUST_REPO}:latest"
  docs-build:
    docker:
      - image: cimg/rust:1.69
    steps:
      - checkout
      - run:
          name: Setup Build docs
          command: |
            cargo install mdbook
            cargo install mdbook-mermaid
            mdbook-mermaid install ./
      - run:
          name: Build docs
          command: |
            ./dev/make-all-docs.sh
            mkdir workspace
            cp -r ./book workspace/doc
      - persist_to_workspace:
          root: workspace
          paths:
            - doc
  docs-publish-github-pages:
    docker:
      - image: cimg/node:16.18.1
    steps:
      - checkout
      - attach_workspace:
          at: workspace
      - run:
          name: Disable jekyll builds
          command: touch workspace/doc/.nojekyll
      - add_ssh_keys:
          fingerprints:
            - "af:ac:a0:85:b4:a1:af:4d:e1:08:42:b5:16:e3:67:2d"
      - run:
          name: Set remote orgin if needed
          command: |
            git remote add origin git@github.com:mozilla-services/merino-py.git || true
      - run:
          name: Deploy docs to gh-pages
          command: |
            npx --yes gh-pages@3.0.0 \
              --user "ci-build <ci-build@merino.mozilla.org>" \
              --message "[skip ci] Docs updates" \
              --repo "git@github.com:mozilla-services/merino-py.git" \
              --dist workspace/doc

commands:
  dockerhub-login:
    steps:
      - run:
          name: Login to Dockerhub
          command: |
            if [ "${DOCKER_USER}" == "" ] || [ "${DOCKER_PASS}" == "" ]; then
              echo "Skipping Login to DockerHub, credentials unavailable"
            else
              echo "${DOCKER_PASS}" | docker login -u="${DOCKER_USER}" --password-stdin
            fi

  write-version:
    steps:
      - run:
          name: Create a version.json
          command: |
            # create a version.json per
            # https://github.com/mozilla-services/Dockerflow/blob/master/docs/version_object.md
            printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
            "$CIRCLE_SHA1" \
            "$CIRCLE_TAG" \
            "$CIRCLE_PROJECT_USERNAME" \
            "$CIRCLE_PROJECT_REPONAME" \
            "$CIRCLE_BUILD_URL" > version.json

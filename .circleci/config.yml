# These environment variables must be set in CircleCI UI
#
# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>
# DOCKERHUB_MERINO_LOCUST_REPO - docker hub repo for performance test, format: <username>/<repo>
# DOCKER_USER    - login info for docker hub
# DOCKER_PASS

version: 2.1

orbs:
  gcp-cli: circleci/gcp-cli@3.3.0

executors:
  image-build-executor:
    docker:
      - image: cimg/base:2025.02
  python-executor:
    docker:
      - image: cimg/python:3.12
  ubuntu-executor:
    machine:
      image: ubuntu-2004:2024.08.1

workflows:
  pr-workflow:
    jobs:
      - checks: &pr-filters
          filters:
            branches:
              ignore: main
      - unit-tests:
          <<: *pr-filters
      - integration-tests:
          <<: *pr-filters
      - test-coverage-check:
          <<: *pr-filters
          requires:
            - unit-tests
            - integration-tests
      - docker-image-build:
          <<: *pr-filters
      - docker-image-build-locust:
          <<: *pr-filters

  main-workflow:
    jobs:
      - checks: &main-filters
          filters:
            branches:
              only: main
      - unit-tests:
          <<: *main-filters
      - integration-tests:
          <<: *main-filters
      - test-coverage-check:
          <<: *main-filters
          requires:
            - unit-tests
            - integration-tests
      - docker-image-build:
          <<: *main-filters
      - docker-image-build-locust:
          <<: *main-filters
      - docker-image-publish-locust:
          <<: *main-filters
          requires:
            - checks
            - test-coverage-check
            - docker-image-build-locust
      - docker-image-publish:
          <<: *main-filters
          requires:
            - docker-image-build
            - docker-image-publish-locust

jobs:
  checks:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Code linting
          command: make -k lint
  unit-tests:
    executor: python-executor
    steps:
      - checkout
      - gcp-cli/setup
      - run:
          name: Create Workspace
          command: mkdir -p workspace
      - run:
          name: Unit tests
          command: make unit-tests
          environment:
            TEST_RESULTS_DIR: workspace/test-results
      - run:
          name: Generate Coverage
          command: make coverage-unit
      - store_test_results:
          path: workspace/test-results
      - persist_to_workspace:
          root: workspace
          paths:
            - test-results
      - upload_to_gcs:
          source: workspace/test-results
          destination: gs://ecosystem-test-eng-metrics/merino-py/junit
          extension: xml
      - upload_to_gcs:
          source: workspace/test-results
          destination: gs://ecosystem-test-eng-metrics/merino-py/coverage
          extension: json
  integration-tests:
    executor: ubuntu-executor
    steps:
      - checkout
      - run:
          name: Create Workspace
          command: mkdir -p workspace
      - gcp-cli/setup
      - setup-python-on-machine
      - run:
          name: Integration tests
          command: make integration-tests
          environment:
            TEST_RESULTS_DIR: workspace/test-results
      - run:
          name: Generate Coverage
          command: make coverage-integration
      - store_test_results:
          path: workspace/test-results
      - persist_to_workspace:
          root: workspace
          paths:
            - test-results
      - upload_to_gcs:
          source: workspace/test-results
          destination: gs://ecosystem-test-eng-metrics/merino-py/junit
          extension: xml
      - upload_to_gcs:
          source: workspace/test-results
          destination: gs://ecosystem-test-eng-metrics/merino-py/coverage
          extension: json
  test-coverage-check:
    executor: python-executor
    steps:
      - checkout
      - attach_workspace:
          at: workspace
      - run:
          name: Evaluate minimum test coverage
          command: make test-coverage-check
          environment:
            TEST_RESULTS_DIR: workspace/test-results
  docker-image-build:
    executor: image-build-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - write-version
      - store_artifacts:
          path: version.json
      - run:
          name: Build image
          command: make docker-build
      - run:
          name: Save image into workspace
          command: |
            mkdir -p /tmp/workspace
            docker save -o /tmp/workspace/merinopy.tar app:build
            gzip /tmp/workspace/merinopy.tar
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - merinopy.tar.gz
  docker-image-build-locust:
    executor: image-build-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build image
          command: docker build -t merino-locust -f ./tests/load/Dockerfile .
      - run:
          name: Save image into workspace
          command: |
            mkdir -p /tmp/workspace
            docker save -o /tmp/workspace/merino-locust.tar merino-locust
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - merino-locust.tar
  docker-image-publish:
    # Pushing a new production Docker image to the Docker Hub registry triggers a
    # webhook that starts the Jenkins deployment workflow
    executor: image-build-executor
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load Docker image from workspace
          command: docker load -i /tmp/workspace/merinopy.tar.gz
      - dockerhub-login
      - run:
          name: Push to Docker Hub
          # The commit tag signals deployment and load test instructions to Jenkins by
          # modifying the Docker image tag name. The convention looks as follows:
          #^(?P<environment>stage|prod)(?:-(?P<task>\w+)-(?P<action>abort|skip|warn))?-(?P<commit>[a-z0-9]+)$
          command: |
            LOAD_TEST_ACTION=$(git log -1 "$CIRCLE_SHA1" | sed -n 's/.*\[load test: \([^]]*\)\].*/\1/p')
            if [ "$LOAD_TEST_ACTION" = "abort" ]; then
              STAGE_DOCKER_TAG="stage-loadtest-abort-${CIRCLE_SHA1}"
            elif [ "$LOAD_TEST_ACTION" = "skip" ]; then
              STAGE_DOCKER_TAG="stage-${CIRCLE_SHA1}"
            else
              STAGE_DOCKER_TAG="stage-loadtest-warn-${CIRCLE_SHA1}"
            fi
            echo "${DOCKERHUB_REPO}:${STAGE_DOCKER_TAG}"
            docker tag app:build "${DOCKERHUB_REPO}:${STAGE_DOCKER_TAG}"
            docker images
            docker push "${DOCKERHUB_REPO}:${STAGE_DOCKER_TAG}"

            PROD_DOCKER_TAG="prod-${CIRCLE_SHA1}"
            echo "${DOCKERHUB_REPO}:${PROD_DOCKER_TAG}"
            docker tag app:build "${DOCKERHUB_REPO}:${PROD_DOCKER_TAG}"
            docker tag app:build "${DOCKERHUB_REPO}:latest"
            docker images
            docker push "${DOCKERHUB_REPO}:${PROD_DOCKER_TAG}"
            docker push "${DOCKERHUB_REPO}:latest"
  docker-image-publish-locust:
    executor: image-build-executor
    steps:
      - checkout
      - run:
          name: Check for load test directive
          command: |
            if git log -1 "$CIRCLE_SHA1" | grep -q '\[load test: skip\]'; then
              echo "Skipping remaining steps in this job: load test not required."
              circleci-agent step halt
            fi
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Load Docker image from workspace
          command: docker load -i /tmp/workspace/merino-locust.tar
      - dockerhub-login
      - run:
          name: Push to Docker Hub
          command: |
            DOCKER_TAG="${CIRCLE_SHA1}"
            echo ${DOCKERHUB_MERINO_LOCUST_REPO}:${DOCKER_TAG}
            docker tag merino-locust ${DOCKERHUB_MERINO_LOCUST_REPO}:${DOCKER_TAG}
            docker tag merino-locust ${DOCKERHUB_MERINO_LOCUST_REPO}:latest
            docker images
            docker push "${DOCKERHUB_MERINO_LOCUST_REPO}:${DOCKER_TAG}"
            docker push "${DOCKERHUB_MERINO_LOCUST_REPO}:latest"

commands:
  dockerhub-login:
    steps:
      - run:
          name: Login to Dockerhub
          command: |
            if [ "${DOCKER_USER}" == "" ] || [ "${DOCKER_PASS}" == "" ]; then
              echo "Skipping Login to DockerHub, credentials unavailable"
            else
              echo "${DOCKER_PASS}" | docker login -u="${DOCKER_USER}" --password-stdin
            fi

  # set up python3.12 and poetry on the ubuntu machine used to run integration tests
  setup-python-on-machine:
    steps:
      - run:
          # the ubuntu machine image we are using comes with python and pyenv
          name: Set python version to 3.12
          command: pyenv global 3.12
      - run:
          name: Install poetry
          command: curl -sSL https://install.python-poetry.org | python3.12 -
      - run:
          name: Add poetry to PATH
          command: echo 'export PATH="$HOME/.local/bin:$PATH"' >> $BASH_ENV
      - run:
          name: Verify Python and poetry installation
          command: |
            python3.12 --version
            poetry --version

  upload_to_gcs:
    parameters:
      source:
        type: string
      destination:
        type: string
      extension:
        type: enum
        enum: ["xml", "json"]
    steps:
      - run:
          name: Upload << parameters.source >> << parameters.extension >> Files to GCS
          when: always # Ensure the step runs even if previous steps, like test runs, fail
          command: |
            if [ "$CIRCLE_BRANCH" = "main" ]; then
              FILES=$(ls -1 << parameters.source>>/*.<< parameters.extension>> )
              if [ -z "$FILES" ]; then
                echo "No << parameters.extension >> files found in << parameters.source >>/"
                exit 1
              fi
              gsutil cp $FILES << parameters.destination >>
            else
              echo "Skipping artifact upload, not on 'main' branch."
            fi

  write-version:
    steps:
      - run:
          name: Create a version.json
          command: |
            # create a version.json per
            # https://github.com/mozilla-services/Dockerflow/blob/master/docs/version_object.md
            printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
            "$CIRCLE_SHA1" \
            "$CIRCLE_TAG" \
            "$CIRCLE_PROJECT_USERNAME" \
            "$CIRCLE_PROJECT_REPONAME" \
            "$CIRCLE_BUILD_URL" > version.json
